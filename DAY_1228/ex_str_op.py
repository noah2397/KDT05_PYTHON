#------------------------------------
# str 데이터 타입 연산
#------------------------------------
#------------------------------------
# 산술 연산 => 덧셈, 뺄셈, 곱셈, 나눗셈....
#------------------------------------
'''
msg1='Good'
msg2='Happy'

#  덧셈연산 --------------------------------
print(msg1 + msg2)

# 뺄셈 연산 --------------------------------
# 미지원
# print(msg1 - msg2)

# 곱셈 영상 --------------------------------
#print(f'msg1 * msg2') # 문자열과 문자열은 곱할 수 없다
print(msg1*10)

# 비교 연산 =>, <=, >, <, ==, !=
# -str 안에 원소/요소 단위로 비교 됨
print(f"'H'>'h' => {'H'>'h'}")
print(f"'H'>'I' => {'H'>'I'}")

#동일한 인덱스에 있는 요소의 코드값으로 비교
print(f"'Ha'>'HA' => {'Ha'>'HA'}")
print(f"'ha'>'hA' => {'ha'>'hA'}")  #똑같은 문자는 패스하고 그 다음 문자중에 누가 더 높은 값을 가지는지 비교함
print(f"'ha'>'Ha' => {'ha'>'Ha'}")  #첫번째에서부터 이미 비교가 끝났다
'''


'''

#----------------------------------------
# 논리 연산 => and, or, not
# -not 문자열
#----------------------------------------
# str => bool 관계
# -요소/원소가 0개인 경우 => False
# -요소/원소가 1개 이상인 겨우 => True

print(not "Happy")
print( bool("Happy"), bool(" "), bool(""))
print(f'not "" => {not ""}')
# "" <- 이걸 엠티스트링이라 한다(Empty String)
'''

#-----------------------------------------------
# 멤버 연산자 => 원소/요소가 있는 데이터 타입의 경우 사용
# - 요소 in 데이터 : 요소가 데이터에 포함되어 있는 경우 : True
# - 요소 not in 데이터 : 요소가 데이터에 미포함되어 있는 경우 : True
#-----------------------------------------------

print(f'"H" in "Happy" =>  {"H" in "Happy"}')
print(f'"H" in "Happy" =>  {"H" in "happy"}')

print(f'"H" in "Happy" =>  {"H" not in "Happy"}')
print(f'"H" in "Happy" =>  {"H" not in "happy"}')

print(f'"1" not in "1357" =>  {"1" in "1357"}')
print(f'"1" not in "1357" =>  {"2" in "1357"}')

#문자열 비교연산자는 정렬할 때 종종 쓰인다

print(f'{"😊😊" in "😊😊"}')






